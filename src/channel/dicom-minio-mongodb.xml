<channel version="4.4.0">
  <id>c7ecda53-36f1-4a00-9864-f1b1c90b067a</id>
  <nextMetaDataId>5</nextMetaDataId>
  <name>dicom-minio-mongodb</name>
  <description></description>
  <revision>286</revision>
  <sourceConnector version="4.4.0">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.dimse.DICOMReceiverProperties" version="4.4.0">
      <pluginProperties/>
      <listenerConnectorProperties version="4.4.0">
        <host>0.0.0.0</host>
        <port>10404</port>
      </listenerConnectorProperties>
      <sourceConnectorProperties version="4.4.0">
        <responseVariable>None</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
      <applicationEntity>MIRTH</applicationEntity>
      <localHost></localHost>
      <localPort></localPort>
      <localApplicationEntity></localApplicationEntity>
      <soCloseDelay>50</soCloseDelay>
      <releaseTo>5</releaseTo>
      <requestTo>5</requestTo>
      <idleTo>60</idleTo>
      <reaper>10</reaper>
      <rspDelay>0</rspDelay>
      <pdv1>false</pdv1>
      <sndpdulen>16</sndpdulen>
      <rcvpdulen>16</rcvpdulen>
      <async>0</async>
      <bigEndian>false</bigEndian>
      <bufSize>1</bufSize>
      <defts>false</defts>
      <dest></dest>
      <nativeData>false</nativeData>
      <sorcvbuf>0</sorcvbuf>
      <sosndbuf>0</sosndbuf>
      <tcpDelay>true</tcpDelay>
      <keyPW></keyPW>
      <keyStore></keyStore>
      <keyStorePW></keyStorePW>
      <noClientAuth>true</noClientAuth>
      <nossl2>true</nossl2>
      <tls>notls</tls>
      <trustStore></trustStore>
      <trustStorePW></trustStorePW>
    </properties>
    <transformer version="4.4.0">
      <elements>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.0">
          <name>Generate MinIO signature</name>
          <sequenceNumber>0</sequenceNumber>
          <enabled>true</enabled>
          <script>var studyInstanceUid = msg[&apos;tag0020000D&apos;];
var seriesInstanceUid = msg[&apos;tag0020000E&apos;];
var sopInstanceUid = msg[&apos;tag00080018&apos;];
var objectPath = &apos;/&apos;
    + globalChannelMap.get(&apos;minioBucket&apos;)
    + &apos;/&apos;
    + studyInstanceUid
    + &apos;/&apos;
    + seriesInstanceUid
    + &apos;/&apos;
    + sopInstanceUid
    + &apos;.dcm&apos;;

// Retrieve the current date/time from the OS.
var process1 = java.lang.Runtime.getRuntime().exec(&apos;date -R --utc&apos;);
if (process1.waitFor() != 0) {
    var error1 = new java.io.BufferedReader(new java.io.InputStreamReader(process1.getErrorStream()));
    throw(&apos;Error retrieving the current date/time: &apos; + error2.readLine());
}
var input1 = new java.io.BufferedReader(new java.io.InputStreamReader(process1.getInputStream()));
var currentDateTime = input1.readLine();

// Generate the signature to be used in accessing the MinIO endpoint.
var processBuilder = new java.lang.ProcessBuilder(
	globalChannelMap.get(&apos;minioBashScriptToGenerateSignature&apos;),
	globalChannelMap.get(&apos;minioContentType&apos;),
	currentDateTime,
	objectPath,
	globalChannelMap.get(&apos;minioPassword&apos;)
);
var process2 = processBuilder.start();
if (process2.waitFor() != 0) {
    var error2 = new java.io.BufferedReader(new java.io.InputStreamReader(process2.getErrorStream()));
    throw(&apos;Error generating the signature: &apos; + error2.readLine());
}
var input2 = new java.io.BufferedReader(new java.io.InputStreamReader(process2.getInputStream()));
var signature = input2.readLine();

channelMap.put(&apos;objectPath&apos;, objectPath);
channelMap.put(&apos;currentDateTime&apos;, currentDateTime);
channelMap.put(&apos;signature&apos;, signature);</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.0">
          <name>Convert metadata from XML to JSON</name>
          <sequenceNumber>1</sequenceNumber>
          <enabled>true</enabled>
          <script>// Convert and manipulate the original message content.
var metadataAsJsonString = XmlUtil.toJson(msg);
var metadataAsJsonObject = JSON.parse(metadataAsJsonString);
metadataAsJsonObject = metadataAsJsonObject[&apos;dicom&apos;];
metadataAsJsonObject[&apos;_id&apos;] = msg[&apos;tag00080018&apos;].toString();

// Compose the payload to MongoDB.
var payload = {};
payload[&apos;dataSource&apos;] = globalChannelMap.get(&apos;mongodbDataSource&apos;);
payload[&apos;database&apos;] = globalChannelMap.get(&apos;mongodbDatabase&apos;);
payload[&apos;collection&apos;] = globalChannelMap.get(&apos;mongodbCollection&apos;);
payload[&apos;document&apos;] = metadataAsJsonObject;

// The payload is send as a Base64 string.
var payloadAsString = new java.lang.String(JSON.stringify(payload));
var payloadAsBytes = payloadAsString.getBytes();
var payloadAsBase64 = FileUtil.encode(payloadAsBytes);

channelMap.put(&apos;payloadAsBase64&apos;, payloadAsBase64);</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
      </elements>
      <inboundTemplate encoding="base64"></inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundDataType>DICOM</inboundDataType>
      <outboundDataType>DICOM</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.dicom.DICOMDataTypeProperties" version="4.4.0"/>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.dicom.DICOMDataTypeProperties" version="4.4.0"/>
    </transformer>
    <filter version="4.4.0">
      <elements/>
    </filter>
    <transportName>DICOM Listener</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="4.4.0">
      <metaDataId>3</metaDataId>
      <name>minio</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="4.4.0">
        <pluginProperties/>
        <destinationConnectorProperties version="4.4.0">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <host>${minioUrl}${objectPath}</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>put</method>
        <headers class="linked-hash-map">
          <entry>
            <string>Host</string>
            <list>
              <string>${minioHost}</string>
            </list>
          </entry>
          <entry>
            <string>Date</string>
            <list>
              <string>${currentDateTime}</string>
            </list>
          </entry>
          <entry>
            <string>Content-Type</string>
            <list>
              <string>${minioContentType}</string>
            </list>
          </entry>
          <entry>
            <string>Authorization</string>
            <list>
              <string>AWS ${minioUsername}:${signature}</string>
            </list>
          </entry>
        </headers>
        <parameters class="linked-hash-map"/>
        <useHeadersVariable>false</useHeadersVariable>
        <headersVariable></headersVariable>
        <useParametersVariable>false</useParametersVariable>
        <parametersVariable></parametersVariable>
        <responseXmlBody>false</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>false</responseIncludeMetadata>
        <responseBinaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>false</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
        <username></username>
        <password></password>
        <content>${DICOMMESSAGE}</content>
        <contentType>${minioContentType}</contentType>
        <dataTypeBinary>true</dataTypeBinary>
        <charset>DEFAULT_ENCODING</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="4.4.0">
        <elements/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>DICOM</inboundDataType>
        <outboundDataType>DICOM</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.dicom.DICOMDataTypeProperties" version="4.4.0"/>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.dicom.DICOMDataTypeProperties" version="4.4.0"/>
      </transformer>
      <responseTransformer version="4.4.0">
        <elements/>
        <inboundDataType>DICOM</inboundDataType>
        <outboundDataType>DICOM</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.dicom.DICOMDataTypeProperties" version="4.4.0"/>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.dicom.DICOMDataTypeProperties" version="4.4.0"/>
      </responseTransformer>
      <filter version="4.4.0">
        <elements/>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="4.4.0">
      <metaDataId>4</metaDataId>
      <name>mongodb</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="4.4.0">
        <pluginProperties/>
        <destinationConnectorProperties version="4.4.0">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <host>${mongodbUrl}</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>post</method>
        <headers class="linked-hash-map">
          <entry>
            <string>Accept</string>
            <list>
              <string>${mongodbAcceptHeader}</string>
            </list>
          </entry>
          <entry>
            <string>apiKey</string>
            <list>
              <string>${mongodbApiKey}</string>
            </list>
          </entry>
          <entry>
            <string>Content-Type</string>
            <list>
              <string>${mongodbContentType}</string>
            </list>
          </entry>
          <entry>
            <string>Access-Control-Request-Headers</string>
            <list>
              <string>${accessControlRequestHeaders}</string>
            </list>
          </entry>
        </headers>
        <parameters class="linked-hash-map"/>
        <useHeadersVariable>false</useHeadersVariable>
        <headersVariable></headersVariable>
        <useParametersVariable>false</useParametersVariable>
        <parametersVariable></parametersVariable>
        <responseXmlBody>false</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>false</responseIncludeMetadata>
        <responseBinaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>false</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
        <username></username>
        <password></password>
        <content>${payloadAsBase64}</content>
        <contentType>${mongodbContentType}</contentType>
        <dataTypeBinary>true</dataTypeBinary>
        <charset>DEFAULT_ENCODING</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="4.4.0">
        <elements/>
        <inboundDataType>DICOM</inboundDataType>
        <outboundDataType>DICOM</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.dicom.DICOMDataTypeProperties" version="4.4.0"/>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.dicom.DICOMDataTypeProperties" version="4.4.0"/>
      </transformer>
      <responseTransformer version="4.4.0">
        <elements/>
        <inboundDataType>DICOM</inboundDataType>
        <outboundDataType>DICOM</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.dicom.DICOMDataTypeProperties" version="4.4.0"/>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.dicom.DICOMDataTypeProperties" version="4.4.0"/>
      </responseTransformer>
      <filter version="4.4.0">
        <elements/>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>false</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data

// The values for the following keys must be reviewed and updated to reflect the target execution environment.

// The username for sending objects to MinIO.
globalChannelMap.put(&apos;minioUsername&apos;, &apos;&lt;review_and_update_me&gt;&apos;);
// The password of the MinIO user.
globalChannelMap.put(&apos;minioPassword&apos;, &apos;&lt;review_and_update_me&gt;&apos;);
// The bucket into MinIO who receives the objects (e.g. &apos;dicom&apos;).
globalChannelMap.put(&apos;minioBucket&apos;, &apos;&lt;review_and_update_me&gt;&apos;);
// The Content-Type of objects sent to MinIO.
globalChannelMap.put(&apos;minioContentType&apos;, &apos;application/dicom&apos;);
// The path to the bash script used to generate a valid signature for sending objects to MinIO.
globalChannelMap.put(&apos;minioBashScriptToGenerateSignature&apos;, &apos;/home/savaris/github/mirth-dicom-minio-mongodb/src/bash/generate_minio_signature.bash&apos;);
// The URL to the MinIO server (e.g. &apos;http://127.0.0.1:9000&apos;).
globalChannelMap.put(&apos;minioUrl&apos;, &apos;&lt;review_and_update_me&gt;&apos;);
// The MinIO host (e.g. &apos;127.0.0.1&apos;).
globalChannelMap.put(&apos;minioHost&apos;, &apos;&lt;review_and_update_me&gt;&apos;);

// The DataSource on MongoDB who receives the DICOM metadata (e.g. &apos;Cluster0&apos;).
globalChannelMap.put(&apos;mongodbDataSource&apos;, &apos;&lt;review_and_update_me&gt;&apos;);
// The Database on MongoDB who receives the DICOM metadata (e.g. &apos;mirth-dicom-minio-mongodb&apos;).
globalChannelMap.put(&apos;mongodbDatabase&apos;, &apos;&lt;review_and_update_me&gt;&apos;);
// The Collection on MongoDB who receives the DICOM metadata (e.g. &apos;dicom&apos;).
globalChannelMap.put(&apos;mongodbCollection&apos;, &apos;&lt;review_and_update_me&gt;&apos;);
// The URL to the MongoDB endpoint (e.g. &apos;https://sa-east-1.aws.data.mongodb-api.com/app/data-vefnv/endpoint/data/v1/action/insertOne&apos;).
globalChannelMap.put(&apos;mongodbUrl&apos;, &apos;&lt;review_and_update_me&gt;&apos;);
// The HTTP &apos;Accept&apos; header to MongoDB Data API.
globalChannelMap.put(&apos;mongodbAcceptHeader&apos;, &apos;*/*&apos;);
// The HTTP &apos;apiKey&apos; header to MongoDB Data API.
globalChannelMap.put(&apos;mongodbApiKey&apos;, &apos;&lt;review_and_update_me&gt;&apos;);
// The HTTP &apos;Content-Type&apos; header to MongoDB Data API.
globalChannelMap.put(&apos;mongodbContentType&apos;, &apos;application/json&apos;);
// The HTTP &apos;Access-Control-Request-Headers&apos; header to MongoDB Data API.
globalChannelMap.put(&apos;accessControlRequestHeaders&apos;, &apos;*&apos;);

return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="4.4.0">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <encryptAttachments>false</encryptAttachments>
    <encryptCustomMetaData>false</encryptCustomMetaData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STOPPED</initialState>
    <storeAttachments>true</storeAttachments>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="4.4.0">
      <className>com.mirth.connect.server.attachments.dicom.DICOMAttachmentHandlerProvider</className>
      <type>DICOM</type>
      <properties/>
    </attachmentProperties>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <exportData>
    <metadata>
      <enabled>true</enabled>
      <lastModified>
        <time>1701805483691</time>
        <timezone>America/Sao_Paulo</timezone>
      </lastModified>
      <pruningSettings>
        <pruneMetaDataDays>7</pruneMetaDataDays>
        <archiveEnabled>false</archiveEnabled>
        <pruneErroredMessages>false</pruneErroredMessages>
      </pruningSettings>
      <userId>1</userId>
    </metadata>
  </exportData>
</channel>